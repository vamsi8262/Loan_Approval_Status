cl = data_train[, "loan_status"],
k = 18)
# Create confusion matrix for training set
train_conf_matrix <- table(Predicted = train_predictions, Actual = data_train$loan_status)
# Display the confusion matrix for training set
print(train_conf_matrix)
# Calculate accuracy for the training set
train_accuracy <- sum(diag(as.matrix(train_conf_matrix))) / sum(train_conf_matrix)
print(paste("Training Accuracy:", round(train_accuracy * 100, 2), "%"))
library("class")
# k-Nearest Neighbor is a randomized algorithm, so make sure to
# use set.seed() to make your results repeatable.
set.seed(1)
bank_18NN = knn(train = data_train[,c("no_of_dependents","self_employed","income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],test =data_test[,c("no_of_dependents","self_employed","income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],cl = data_train[, "loan_status"],k = 18)
str(bank_18NN)
length(bank_18NN)
table(bank_18NN)
conf_matrix<-table(Predicted = bank_18NN, Actual = data_test$loan_status)
accuracy <- sum(diag(as.matrix(conf_matrix))) / sum(conf_matrix)
print(paste("Test Accuracy:", round(accuracy * 100, 2), "%"))
library("gmodels")
IRISPREDCross <- CrossTable(data_test[,"loan_status"], bank_18NN, prop.chisq = FALSE)
library("caret")
cm = confusionMatrix(bank_18NN, reference = as.factor(data_test[, "loan_status"]) )
cm
precision <- cm$byClass["Precision"]
recall <- cm$byClass["Recall"]
print(paste("Precision:", round(precision, 2)))
print(paste("Recall:", round(recall, 2)))
library("class")
library("pROC")
# Set seed for reproducibility
set.seed(1)
# Create a ROC curve
roc_curve <- roc(ifelse(data_test[, "loan_status"] == "Approved", 1, 0), ifelse(bank_18NN == "Approved", 1, 0))
# Plot the ROC curve
plot(roc_curve, main = "ROC Curve", col = "gold", lwd = 2)
# Add AUC value to the plot
text(0.8, 0.2, paste("AUC =", round(auc(roc_curve), 3)), col = "black")
# Add a diagonal reference line (random classifier)
abline(a = 0, b = 1, col = "gray", lty = 2)
k<-auc(roc_curve)
library(rpart)
# Assuming 'data_train' and 'data_test' are your training and test sets
# Assuming 'loan_status' is your binary outcome variable
# Train the decision tree model
tree_model <- rpart(loan_status ~ no_of_dependents + self_employed + income_annum +
loan_amount + loan_term + cibil_score + luxury_assets_value +
bank_asset_value, data = data_train, method = "class")
# Make predictions on the test set
tree_predictions <- predict(tree_model, newdata = data_train, type = "class")
# Evaluate the predictions
conf_matrix<-table(tree_predictions, data_train$loan_status)
# Calculate accuracy for the test set
accuracy <- sum(diag(as.matrix(conf_matrix))) / sum(conf_matrix)
print(paste("Train Accuracy:", round(accuracy * 100, 2), "%"))
library(rpart)
# Assuming 'data_train' and 'data_test' are your training and test sets
# Assuming 'loan_status' is your binary outcome variable
# Train the decision tree model
tree_model <- rpart(loan_status ~ no_of_dependents + self_employed + income_annum +
loan_amount + loan_term + cibil_score + luxury_assets_value +
bank_asset_value, data = data_train, method = "class")
# Make predictions on the test set
tree_predictions <- predict(tree_model, newdata = data_test, type = "class")
# Evaluate the predictions
conf_matrix<-table(tree_predictions, data_test$loan_status)
# Calculate accuracy for the test set
accuracy <- sum(diag(as.matrix(conf_matrix))) / sum(conf_matrix)
print(paste("Test Accuracy:", round(accuracy * 100, 2), "%"))
library("caret")
cm = confusionMatrix(tree_predictions, reference = as.factor(data_test[, "loan_status"]) )
cm
precision <- cm$byClass["Precision"]
recall <- cm$byClass["Recall"]
print(paste("Precision:", round(precision, 2)))
print(paste("Recall:", round(recall, 2)))
library(pROC)
tree_predictions<-as.numeric(tree_predictions)
data_test$loan_status<-as.numeric(data_test$loan_status)
# Create a ROC curve
roc_curve2 <- roc(data_test$loan_status, tree_predictions)
# Plot the ROC curve
plot(roc_curve2, main = "ROC Curve", col = "gold", lwd = 2)
# Add AUC value to the plot
auc_value <- auc(roc_curve2)
text(0.8, 0.2, paste("AUC =", round(auc_value, 3)), col = "black", cex = 1.2)
# Optionally, add a diagonal reference line for comparison
# Print the AUC value
cat("AUC:", auc_value, "\n")
print(paste("AUC score of KNN", k))
print(paste("AUC score of decision Tress", auc_value))
print(paste("AUC score of Logistic regressor", k_logit))
auc_values <- c(0.5335, 0.9553, 0.9677,0.9832)
model_names <- c("KNN", "Decision Tree", "Logistic Regression","Random Forest")  # Replace with your actual model names
# Create a curve of AUC values with model names on the x-axis
plot(auc_values, type = "o", col = "gold", pch = 16, lty = 1,
xlab = "Model", ylab = "AUC Score",
main = "AUC Score Progression", xaxt = "n")  # xaxt = "n" to suppress default x-axis
# Add grid lines for better readability
grid()
# Add x-axis labels using the axis function
axis(side = 1, at = 1:length(model_names), labels = model_names)
# Optionally, add a horizontal line for reference (e.g., baseline AUC)
abline(h = 0.8, col = "red", lty = 2)
library(randomForest)
# Fit a Random Forest model for classification
rf_model <- randomForest(loan_status ~ no_of_dependents + income_annum + loan_amount +
loan_term + cibil_score + luxury_assets_value + bank_asset_value,
data = data_train, ntree = 500, importance = TRUE)
# Print the summary of the Random Forest model
print(rf_model)
# Make predictions on the training set (replace 'data_train' with your test set)
rf_predictions <- predict(rf_model, newdata = data_train)
conf_matrix<-table(rf_predictions, data_train$loan_status)
# Calculate accuracy for the test set
accuracy <- sum(diag(as.matrix(conf_matrix))) / sum(conf_matrix)
print(paste("Train Accuracy:", round(accuracy * 100, 2), "%"))
# Make predictions on the test set
rf_predictions <- predict(rf_model, newdata = data_test, type = "class")
# Evaluate the predictions
conf_matrix<-table(rf_predictions, data_test$loan_status)
# Calculate accuracy for the test set
accuracy <- sum(diag(as.matrix(conf_matrix))) / sum(conf_matrix)
print(paste("Test Accuracy:", round(accuracy * 100, 2), "%"))
library(pROC)
rf_predictions<-as.numeric(rf_predictions)
data_test$loan_status<-as.numeric(data_test$loan_status)
# Create a ROC curve
roc_curve2 <- roc(data_test$loan_status, rf_predictions)
# Plot the ROC curve
plot(roc_curve2, main = "ROC Curve", col = "gold", lwd = 2)
# Add AUC value to the plot
auc_value <- auc(roc_curve2)
text(0.8, 0.2, paste("AUC =", round(auc_value, 3)), col = "black", cex = 1.2)
# Optionally, add a diagonal reference line for comparison
# Print the AUC value
cat("AUC:", auc_value, "\n")
library(ezids)
library(ggplot2)
library(gridExtra)
library(stringr)
library(corrplot)
library(RColorBrewer)
library(scales)
library(dplyr)
library("car")
library("class")
library("pROC")
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
data_pre<-data.frame(read.csv("loan_approval_dataset.csv"))
data<-data_pre
str(data)
NA_values <- sum(is.na(data))
NA_values
data<- subset(data_pre, select = -c(loan_id))
data$education <- as.factor(data$education)
data$self_employed<-as.factor(data$self_employed)
data$loan_status<-as.factor(data$loan_status)
str(data)
summary(data)
ggplot(data, aes(y = no_of_dependents, x = loan_status, fill = loan_status)) +
geom_boxplot(binwidth = 0.5, color = "black", alpha = 0.9) +
labs(
title = "Box plot of number of dependents and loan status",
x = "Loan Status",
y = "Number of Dependents"
) +
scale_fill_manual(values = c("#93C572", "#4682B4"))+theme_minimal()
data <- data %>%
mutate(self_employed = str_trim(self_employed))
data <- data %>%
mutate(education = str_trim(education))
data <- data %>%
mutate(loan_status = str_trim(loan_status))
data$education<-as.factor(data$education)
data$self_employed<-as.factor(data$self_employed)
data$loan_status<-as.factor(data$loan_status)
class(data$self_employed)
class(data$luxury_assets_value)
class(data$income_annum)
class(data$loan_status)
str(data)
data$self_employed <- factor(data$self_employed, levels = c("Yes", "No", "Other"))
ggplot(data, aes(x =loan_status, fill = self_employed)) +
geom_bar(position = "dodge", stat = "count") +
labs(title = "Stacked Bar between Loan Status and Self Employment",
x = "Loan Status",
y = "Count",
fill = "self_employed") + scale_fill_manual(values = c("Yes" = "#93C572", "No" = "#4682B4", "Other" = "gray")) +
theme_minimal()
data1 <- data
data1$self_employed <- as.integer(data$self_employed == "Yes")
data1$loan_status <- as.integer(data$loan_status == "Approved")
data1$education <- as.integer(data$education == "Graduate")
ggplot(data, aes(x = loan_term,fill=loan_status)) +
geom_density() +
theme_bw() +
theme() +
labs(
title = "Density plot of Loan Term based on Loan Status",
x = "Loan Term (Years)",
y = "Density of the Applicants"
)+scale_fill_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x= cibil_score, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of CIBIL Score vs Loan Amount",
x = "CIBIL Score",
y = "Loan Amount") +
scale_color_manual(values = c("#93C572", "#4682B4")) + scale_x_continuous(breaks = seq(min(data$cibil_score), max(data$cibil_score), by = 50))+scale_y_continuous(labels = comma_format(scale = 1e-6,suffix = "M"), breaks = seq(0, 35000000, by = 5000000)) + theme_minimal()
ggplot(data, aes(x= residential_assets_value, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of CIBIL Score vs Loan Amount",
x = "Residential Assets value",
y = "Loan Amount") +scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x= commercial_assets_value, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of Commercial assets value vs Loan Amount",
x = "Commercial assets value",
y = "Loan Amount") +scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x= luxury_assets_value, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of luxury assets value vs Loan Amount",
x = "Luxury Assets value",
y = "Loan Amount") +scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x= bank_asset_value, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of bank asset value vs Loan Amount",
x = "bank Assets value",
y = "Loan Amount") +scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x= income_annum, y = loan_amount, color = loan_status)) +
geom_point() +
labs(title = "Scatter Plot of income annum vs Loan Amount",
x = "Income annum",
y = "Loan Amount") +scale_color_manual(values = c("#93C572", "#4682B4")) + theme_minimal()
ggplot(data, aes(x = self_employed, y = cibil_score, fill=loan_status)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Box plot between loan status and cibil score",
x = "Self Employed",
y = "cibil score")+
scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
ggplot(data, aes(x = bank_asset_value, fill = loan_status)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Bank Assets grouped by Loan Status",
x = "Bank Assets",
y = "Density")+scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()+scale_x_continuous(labels = comma_format(scale = 1e-7,suffix = "M"))
ggplot(data, aes(x = cibil_score, fill = loan_status)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Cibil Score grouped by Loan Status",
x = "CIBIL Score",
y = "Density")+scale_fill_manual(values = c("Approved" = "#93C572", "Rejected" = "#4682B4"))+
theme_minimal()
x <- cor(data1)
corrplot(x, type = "full", tl.cex = 0.7, method = "color", col = colorRampPalette(brewer.pal(6, "PuOr"))(100))
Approved<-subset(data,data$loan_status=="Approved")
rejected<-subset(data,data$loan_status=="Rejected")
alpha=0.05
test_cibil<-t.test(Approved$cibil_score,rejected$cibil_score)
test_cibil
c<-table(data$education, data$loan_status)
c_test2<-chisq.test(c)
c_test2
test_bank_asset<-t.test(Approved$bank_asset_value,rejected$bank_asset_value)
test_bank_asset
test_residential<-t.test(Approved$residential_assets_value,rejected$residential_assets_value)
test_residential
Approved<-subset(data,data$loan_status=="Approved")
rejected<-subset(data,data$loan_status=="Rejected")
test<-t.test(Approved$no_of_dependents,rejected$no_of_dependents)
test
a<-subset(data,data$loan_status=="Approved")
r<-subset(data,data$loan_status=="Rejected")
test2=t.test(a$luxury_assets_value,r$luxury_assets_value)
test2
correlation_result <- cor.test(data$loan_term, data$loan_amount)
cat("Pearson Correlation Coefficient:", correlation_result$estimate, "\n")
cat("p-value:", correlation_result$p.value, "\n")
library("leaps")
reg.best10 <- regsubsets(loan_amount~. , data = data, nvmax = 10, nbest = 2, method = "exhaustive")
plot(reg.best10, scale = "adjr2", main = "Adjusted R^2")
plot(reg.best10, scale = "r2", main = "R^2")
# In the "leaps" package, we can use scale=c("bic","Cp","adjr2","r2")
plot(reg.best10, scale = "bic", main = "BIC")
plot(reg.best10, scale = "Cp", main = "Cp")
summary(reg.best10)
summaryRegForward = summary(reg.best10)
# Adjusted R2
car::subsets(reg.best10, statistic="adjr2", legend = FALSE, min.size = 7, main = "Adjusted R^2 Plot")
subsets(reg.best10, statistic="cp", legend = FALSE, min.size = 4, main = "Mallow Cp Plot")
abline(a = 1, b = 1, lty = 3)
library("bestglm")
res.bestglm <- bestglm(Xy = data, family = binomial,
IC = "AIC",
method = "exhaustive")
summary(res.bestglm)
res.bestglm$BestModels
summary(res.bestglm$BestModels)
plot(predict(res.bestglm$BestModel), residuals(res.bestglm$BestModel),
xlab = "Predicted Values", ylab = "Residuals",
main = "Observed vs. Predicted Values")
table(data$loan_status)
table(data$loan_status)[2] / sum(table(data$loan_status))
set.seed(1)
data_train_rows = sample(1:nrow(data),
round(0.8 * nrow(data), 0),
replace = FALSE)
length(data_train_rows) / nrow(data)
data_train = data[data_train_rows, ]
data_test = data[-data_train_rows, ]
nrow(data_train)
nrow(data_test)
model<-lm(loan_amount~no_of_dependents+loan_term+income_annum+commercial_assets_value+cibil_score+loan_status,data=data)
summary(model)
ezids::xkabledply(model,title = "Summary of loan amount prediction")
ezids::xkablevif(model)
model <- lm(loan_amount ~ no_of_dependents + loan_term + income_annum +
commercial_assets_value + cibil_score + loan_status, data = data_train)
train_predictions <- predict(model, newdata = data_train)
test_predictions <- predict(model, newdata = data_test)
plot_data <- data.frame(Actual = data_test$loan_amount, Predicted = test_predictions)
train_r_squared <- cor(data_train$loan_amount, train_predictions)^2
cat("Training R-squared:", train_r_squared, "\n")
test_r_squared <- cor(data_test$loan_amount, test_predictions)^2
cat("Testing R-squared:", test_r_squared, "\n")
# Create a scatter plot
ggplot(plot_data, aes(x = Actual, y = Predicted)) +
geom_point(color="#93C572") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "Actual vs Predicted Values",
x = "Actual Values",
y = "Predicted Values")+scale_x_continuous(labels = comma_format(scale = 1e-6,suffix = "M"), breaks = seq(0, 35000000, by = 5000000))+scale_y_continuous(labels = comma_format(scale = 1e-6,suffix = "M"), breaks = seq(0, 35000000, by = 5000000))+theme_minimal()
Logit <- glm(loan_status ~ no_of_dependents  + income_annum+loan_amount+loan_term+cibil_score+luxury_assets_value+bank_asset_value, data = data_train, family = "binomial")
summary_output<-summary(Logit)
summary_output
ezids::xkabledply(Logit, title =" Summary of logistic Regression for loan status")
expcoeff = exp(coef(Logit))
# expcoeff
ezids::xkabledply( as.table(expcoeff), title = "Exponential of coefficients in Logit Reg" )
# prediction
data_train$prediction <- predict( Logit, newdata = data_train, type = "response" )
data_test$prediction  <- predict( Logit, newdata = data_test , type = "response" )
# distribution of the prediction score grouped by known outcome
ggplot( data_train, aes( prediction, color = as.factor(loan_status) ) ) +
geom_density( size = 1 ) +
ggtitle( "Training Set's Predicted Score" )+ labs(color = "Loan Status")
train_predictions <- predict(Logit, newdata = data_train, type = "response")
train_predictions_class <- ifelse(train_predictions > 0.49, 1, 0)
train_conf_matrix <- table(Predicted = train_predictions_class, Actual = data_train$loan_status)
train_accuracy <- sum(diag(as.matrix(train_conf_matrix))) / sum(train_conf_matrix)
print(paste("Training Accuracy:", round(train_accuracy * 100, 2), "%"))
test_predictions <- predict(Logit, newdata = data_test, type = "response")
test_predictions_class <- ifelse(test_predictions > 0.49, 1, 0)
test_conf_matrix <- table(Predicted = test_predictions_class, Actual = data_test$loan_status)
test_accuracy <- sum(diag(as.matrix(test_conf_matrix))) / sum(test_conf_matrix)
print(paste("Test Accuracy:", round(test_accuracy * 100, 2), "%"))
train_precision <- train_conf_matrix[2, 2] / sum(train_conf_matrix[, 2])
print(paste("Training Precision:", round(train_precision*100, 2), "%"))
train_recall <- train_conf_matrix[2, 2] / sum(train_conf_matrix[2, ])
print(paste("Training Recall:", round(train_recall*100, 2), "%"))
test_precision <- test_conf_matrix[2, 2] / sum(test_conf_matrix[, 2])
print(paste("Test Precision:", round(test_precision*100, 2), "%"))
test_recall <- test_conf_matrix[2, 2] / sum(test_conf_matrix[2, ])
print(paste("Test Recall:", round(test_recall*100, 2), "%"))
library("regclass")
# confusion_matrix(admitLogit)
ezids::xkabledply( confusion_matrix(Logit), title = "Confusion matrix from Logit Model" )
library("pROC")
prob=predict(Logit, type = "response" )
data_train$prob=prob
h <- roc(loan_status~prob, data=data_train)
roc_curve=auc(h) # area-under-curve prefer 0.8 or higher.
k_logit=roc_curve
#plot(h)
plot(h, main = "ROC Curve", col = "gold", lwd = 2)
text(0.8, 0.2, paste("AUC =", round(auc(h), 3)), col = "black")
# unloadPkg("pROC")
NullLogit <- glm(loan_status ~ 1, data = data, family = "binomial")
mcFadden = 1 - logLik(Logit)/logLik(NullLogit)
mcFadden
data_train$self_employed<-as.numeric(data_train$self_employed)
data_test$self_employed<-as.numeric(data_test$self_employed)
str(data_train)
library("class")
library("ggplot2")
chooseK = function(k, train_set, val_set, train_class, val_class){
set.seed(1)
class_knn = knn(train = train_set,
test = val_set,
cl = train_class,
k = k)
tab = table(class_knn, val_class)
accu = sum(tab[row(tab) == col(tab)]) / sum(tab)
cbind(k = k, accuracy = accu)
}
knn_different_k = sapply(seq(1, 21, by = 2),
function(x) chooseK(x,
train_set = data_train[, c("no_of_dependents","self_employed" ,"income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],
val_set = data_test[, c("no_of_dependents","self_employed" ,"income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],
train_class = data_train[, "loan_status"],
val_class = data_test[, "loan_status"]))
str(knn_different_k)
knn_different_k = data.frame(k = knn_different_k[1,],
accuracy = knn_different_k[2,])
ggplot(knn_different_k,
aes(x = k, y = accuracy)) +
geom_line(color = "orange", size = 1.5) +
geom_point(size = 3) +
labs(title = "accuracy vs k")+theme_minimal()
train_predictions <- knn(train = data_train[, c("no_of_dependents","self_employed","income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],
test = data_train[, c("no_of_dependents","self_employed","income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],
cl = data_train[, "loan_status"],
k = 18)
train_conf_matrix <- table(Predicted = train_predictions, Actual = data_train$loan_status)
print(train_conf_matrix)
train_accuracy <- sum(diag(as.matrix(train_conf_matrix))) / sum(train_conf_matrix)
print(paste("Training Accuracy:", round(train_accuracy * 100, 2), "%"))
library("class")
# k-Nearest Neighbor is a randomized algorithm, so make sure to
# use set.seed() to make your results repeatable.
set.seed(1)
bank_18NN = knn(train = data_train[,c("no_of_dependents","self_employed","income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],test =data_test[,c("no_of_dependents","self_employed","income_annum","loan_amount","loan_term","cibil_score","luxury_assets_value","bank_asset_value")],cl = data_train[, "loan_status"],k = 18)
str(bank_18NN)
length(bank_18NN)
table(bank_18NN)
conf_matrix<-table(Predicted = bank_18NN, Actual = data_test$loan_status)
accuracy <- sum(diag(as.matrix(conf_matrix))) / sum(conf_matrix)
print(paste("Test Accuracy:", round(accuracy * 100, 2), "%"))
library("gmodels")
IRISPREDCross <- CrossTable(data_test[,"loan_status"], bank_18NN, prop.chisq = FALSE)
library("caret")
cm = confusionMatrix(bank_18NN, reference = as.factor(data_test[, "loan_status"]) )
cm
precision <- cm$byClass["Precision"]
recall <- cm$byClass["Recall"]
print(paste("Precision:", round(precision, 2)))
print(paste("Recall:", round(recall, 2)))
library("class")
library("pROC")
set.seed(1)
roc_curve <- roc(ifelse(data_test[, "loan_status"] == "Approved", 1, 0), ifelse(bank_18NN == "Approved", 1, 0))
plot(roc_curve, main = "ROC Curve", col = "gold", lwd = 2)
text(0.8, 0.2, paste("AUC =", round(auc(roc_curve), 3)), col = "black")
abline(a = 0, b = 1, col = "gray", lty = 2)
k<-auc(roc_curve)
library(rpart)
tree_model <- rpart(loan_status ~ no_of_dependents + self_employed + income_annum +
loan_amount + loan_term + cibil_score + luxury_assets_value +
bank_asset_value, data = data_train, method = "class")
tree_predictions <- predict(tree_model, newdata = data_train, type = "class")
conf_matrix<-table(tree_predictions, data_train$loan_status)
accuracy <- sum(diag(as.matrix(conf_matrix))) / sum(conf_matrix)
print(paste("Train Accuracy:", round(accuracy * 100, 2), "%"))
library(rpart)
tree_model <- rpart(loan_status ~ no_of_dependents + self_employed + income_annum +
loan_amount + loan_term + cibil_score + luxury_assets_value +
bank_asset_value, data = data_train, method = "class")
tree_predictions <- predict(tree_model, newdata = data_test, type = "class")
conf_matrix<-table(tree_predictions, data_test$loan_status)
accuracy <- sum(diag(as.matrix(conf_matrix))) / sum(conf_matrix)
print(paste("Test Accuracy:", round(accuracy * 100, 2), "%"))
library("caret")
cm = confusionMatrix(tree_predictions, reference = as.factor(data_test[, "loan_status"]) )
cm
precision <- cm$byClass["Precision"]
recall <- cm$byClass["Recall"]
print(paste("Precision:", round(precision, 2)))
print(paste("Recall:", round(recall, 2)))
library(pROC)
tree_predictions<-as.numeric(tree_predictions)
data_test$loan_status<-as.numeric(data_test$loan_status)
roc_curve2 <- roc(data_test$loan_status, tree_predictions)
plot(roc_curve2, main = "ROC Curve", col = "gold", lwd = 2)
auc_value <- auc(roc_curve2)
text(0.8, 0.2, paste("AUC =", round(auc_value, 3)), col = "black", cex = 1.2)
cat("AUC:", auc_value, "\n")
print(paste("AUC score of KNN", k))
print(paste("AUC score of decision Tress", auc_value))
print(paste("AUC score of Logistic regressor", k_logit))
library(randomForest)
rf_model <- randomForest(loan_status ~ no_of_dependents + income_annum + loan_amount +
loan_term + cibil_score + luxury_assets_value + bank_asset_value,
data = data_train, ntree = 500, importance = TRUE)
print(rf_model)
feature_importance <- importance(rf_model)
print(feature_importance)
rf_predictions <- predict(rf_model, newdata = data_train)
conf_matrix<-table(rf_predictions, data_train$loan_status)
accuracy <- sum(diag(as.matrix(conf_matrix))) / sum(conf_matrix)
print(paste("Train Accuracy:", round(accuracy * 100, 2), "%"))
rf_predictions <- predict(rf_model, newdata = data_test, type = "class")
conf_matrix<-table(rf_predictions, data_test$loan_status)
accuracy <- sum(diag(as.matrix(conf_matrix))) / sum(conf_matrix)
print(paste("Test Accuracy:", round(accuracy * 100, 2), "%"))
library(pROC)
rf_predictions<-as.numeric(rf_predictions)
data_test$loan_status<-as.numeric(data_test$loan_status)
roc_curve2 <- roc(data_test$loan_status, rf_predictions)
plot(roc_curve2, main = "ROC Curve", col = "gold", lwd = 2)
auc_value <- auc(roc_curve2)
text(0.8, 0.2, paste("AUC =", round(auc_value, 3)), col = "black", cex = 1.2)
cat("AUC:", auc_value, "\n")
auc_values <- c(0.5335, 0.9553, 0.9677,0.9832)
model_names <- c("KNN", "Decision Tree", "Logistic Regression","Random Forest")
plot(auc_values, type = "o", col = "gold", pch = 16, lty = 1,
xlab = "Model", ylab = "AUC Score",
main = "AUC Score Progression", xaxt = "n")  # xaxt = "n" to suppress default x-axis
grid()
axis(side = 1, at = 1:length(model_names), labels = model_names)
abline(h = 0.8, col = "red", lty = 2)
